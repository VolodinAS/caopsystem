<?php
spoiler_begin('Работа с MySQLEditor.js', 'mysqleditor', 'collapse', '', 'admin-spoiler');
?>
<h4>Обновлено: 22.01.2023 17:14:32 ТЛТ</h4>
<ul>
    <li>Прописать КЛАСС input-поля: <b>mysqleditor</b></li>
    <li>Указать атрибуты <b>id</b> и <b>name</b></li>
    <li>Атрибут <b>data-action</b> - действие; возможные значения:
        <ul>
            <li>"<u>edit</u>" - при указывании в поле нового значения происходит сохранение данного значения</li>
            <li>"<u>add</u>" - добавляет новые данные в таблицу, требует дополнительных настроек</li>
            <li>"<u>remove</u>" - удаление записи из таблицы</li>
        </ul>
    </li>
    <li>Атрибут <b>data-table</b> - имя таблицы</li>
    <li>Атрибут <b>data-assoc</b> - ассоциативные таблицы (T1, T2 и т.д.); возможные значения "<u>0</u>", "<u>1</u>"</li>
    <li>Атрибут <b>data-fieldid</b> - название ID-столбца таблицы</li>
    <li>Атрибут <b>data-id</b> - не путать с атрибутом <b>id</b> - ID изменяемой строки</li>
    <li>Атрибут <b>data-field</b> - название изменяемого столбца строки [ID]</li>
    <li>Атрибут <b>data-unixfield</b> - название столбца, в котором изменится unix-время после обновления [по умолчанию НЕ прописывается]</li>
    <li>Атрибут <b>data-preset</b> - список параметров в упаковке http_build_query() [по умолчанию НЕ прописывается]</li>
    <li>Атрибут <b>data-jsonarray</b> - список параметров в упаковке json; собирает все данные, которым прописан атрибут и сохраняет в виде json-массива в поле field; возможные значения "<u>0</u>", "<u>1</u>" [по умолчанию НЕ прописывается]</li>
    <li>Атрибут <b>data-checkarray</b> - собирает все поля, отмеченные данным атрибутом; проверяет свойство checked - если установлен флажок - добавляет в массив [...key:value] и отправляет в поле field</li>
    <li>Атрибут <b>data-return</b> - вернуть полученные данные в УКАЗАННОЕ поле; нужно указать атрибут тэга "." или "#" [по умолчанию НЕ прописывается]</li>
    <li>Атрибут <b>data-returntype</b> - ОБЯЗАТЕЛЬНЫЙ доп. атрибут к "data-return" для указания, каким типом вернуть данные; возможные значения "<u>html</u>" (при возвращении значения в DOM-элемент), "<u>input</u>" (при возвращении значения в поле ввода) [по умолчанию НЕ прописывается]</li>
    <li>Атрибут <b>data-returnfunc</b> - ОБЯЗАТЕЛЬНЫЙ доп. атрибут к "data-return" для указания функции, которая возвратит нужные данные; возможные значения [по умолчанию НЕ прописываются]:
        <ul>
            <li>"<u>research_string</u>" (возвращает строку исследования в поле для копирования),</li>
            <li>"<u>citology_string</u>" (возвращает строку цитологии в поле для копирования),</li>
            <li>"<u>journal_current_move_button</u> (картинка о статусе перемещения на другой день - только в СПО)"</li>
            <li>"<u>fast_move_icon</u>" (необходимость быстрого перемещения по датам)</li>
            <li>"<u>value</u>" (возвращает обработанный value)</li>
        </ul>
    </li>
    <li>Атрибут <b>data-loader</b> - имя id-атрибута элемента, в котором изначально надо показать предзагрузчик [по умолчанию НЕ прописывается]</li>
    <li>Атрибут <b>data-adequate</b> - функция адекватирования, через которую пропускаются данные; возможные значения [по умолчанию НЕ прописывается]:
        <ul>
            <li>"<u>MKB</u>" (проверяет МКБ-коды)</li>
            <li>"<u>HOURMIN</u>" (разделяет время на часы:минуты)</li>
            <li>"<u>HOLIDAYS_BEGIN</u>" (преобразует день.месяц в секунды SBBOY-begin)</li>
            <li>"<u>HOLIDAYS_END</u>" (преобразует день.месяц в секунды SBBOY-end)</li>
            <li>"<u>DATETOUNIX</u>" (преобразует день.месяц.год в unix-timestamp)</li>
        </ul>
    </li>
    <li>Атрибут <b>data-callbackfunc</b> - js-функция, которую нужно выполнить по завершению запроса [по умолчанию НЕ прописывается]</li>
    <li>Атрибут <b>data-callbackparams</b> - параметры js-функции: можно задать значение или параметр <u>self</u> (возьмет текущее значение объекта) [по умолчанию НЕ прописывается]</li>
    <li>Атрибут <b>data-callbackcond</b> - условия выполнения callback-функции: возможные значения <u>always</u>, <u>success</u>, <u>error</u> [по умолчанию НЕ "success"]</li>
    <li>Атрибут <b>data-separator</b> - разделяет полученные данные по поля: пример <u>;|||time_hour,time_min</u> - разделение через <b>;</b>, разделенные данные добавить в поля <u>time_hour</u> и <u>time_min</u></li>

</ul>
Также, возможно задать MySQLEditor на произвольные DOM-элементы. Для этого:
<ul>
    <li>Прописывается <b>onclick="MySQLEditorAction(this, true)"</b></li>
    <li>Добавляются все нужные параметры из предыдущего пункта</li>
    <li>Вместо value="значение" добавляется атрибут <b>data-buttonvalue="значение"</b></li>
    <li>Образец использования кнопки удаления:
        <pre><code>
            button class="btn btn-sm btn-success"
                    onclick="if (confirm('Вы действительно хотите удалить данный праздник?')){MySQLEditorAction(this, true); window.location.reload()}"
                    data-action="remove"
                    data-table="<?= CAOP_HOLIDAYS; ?>"
                    data-assoc="0"
                    data-fieldid="holiday_id"
                    data-id="<?= $holiday['holiday_id']; ?>">
                <?= BT_ICON_CLOSE_LG; ?>
            /button>
        </code></pre>
    </li>
</ul>
<?php
spoiler_end();
?>